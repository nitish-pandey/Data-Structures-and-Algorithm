
Questions related to Data Structures:

Tag: Array 

1. What is an array? What are the different types of arrays?

Ans: An array is a collection of items stored at contiguous memory locations. 
        The idea is to store multiple items of the same type together. 
        This makes it easier to calculate the position of each element by simply adding an offset to a base value, 
        i.e., the memory location of the first element of the array (generally denoted by the name of the array).

        Types of arrays:
        1. One-dimensional array
        2. Multi-dimensional array
        3. Jagged array



2. What is the difference between a one-dimensional array and a two-dimensional array?

Ans: A one-dimensional array is a collection of elements that are arranged in a linear fashion, 
        i.e., the elements are arranged in a single row or a single column. 
        A two-dimensional array is a collection of elements that are arranged in a rectangular fashion, 
        i.e., the elements are arranged in rows and columns.



3. What is the difference between a static array and a dynamic array?

Ans: A static array is a fixed-size array. 
        The size of the array is fixed at compile time and cannot be changed at run time. 
        A dynamic array is a resizable array. 
        The size of the array can be increased or decreased at run time.




Tag+=Linked List

1. What is a linked list? What are the different types of linked lists?

Ans: A linked list is a linear data structure, in which the elements are not stored at contiguous memory locations. 
        The elements in a linked list are linked using pointers as shown in the below image.

        Types of linked lists:
        1. Singly linked list
        2. Doubly linked list
        3. Circular linked list



2. What is the difference between a singly linked list and a doubly linked list?

Ans: A singly linked list is a linked list in which each node contains a pointer to the next node in the list. 
        A doubly linked list is a linked list in which each node contains a pointer to the next node as well as the previous node in the list.



3. What is the difference between a singly linked list and a circular linked list?

Ans: A singly linked list is a linked list in which each node contains a pointer to the next node in the list. 
        A circular linked list is a linked list in which the last node points to the first node in the list.



4. Difference between Array and Linked List?

Ans: Array is a collection of elements stored at contiguous memory locations. 
        Linked list is a collection of elements stored at non-contiguous memory locations. 
        Array is a static data structure. Linked list is a dynamic data structure. 
        Array is a linear data structure. Linked list is a non-linear data structure. 
        Array is a sequential data structure. Linked list is a non-sequential data structure. 
        Array is a homogeneous data structure. Linked list is a heterogeneous data structure. 
        Array is a random access data structure. Linked list is a sequential access data structure. 
        Array is a static data structure. Linked list is a dynamic data structure. 
        Array is a fixed size data structure. Linked list is a variable size data structure. 
        Array is a stack data structure. Linked list is a queue data structure.


5. Applications of Linked List?

Ans: Linked lists are used to implement stacks, queues, graphs, etc. 
        Linked lists are used to implement hash tables, dynamic memory allocation, etc. 
        Linked lists are used to implement adjacency lists, adjacency matrices, etc. 
        Linked lists are used to implement sparse matrices, etc.



Tag += Stack

1. What is a stack? What are the different types of stacks?

Ans: A stack is a linear data structure that follows the Last In First Out (LIFO) order. 
        The element that is inserted last is the first element to be removed. 
        The insertion and deletion operations are performed at one end of the stack called the top. 
        The stack is a simple data structure that can be implemented using arrays or linked lists.

        Types of stacks:
        1. Array implementation of stack
        2. Linked list implementation of stack



2. What is the difference between a stack and a queue?

Ans: A stack is a linear data structure that follows the Last In First Out (LIFO) order. 
        The element that is inserted last is the first element to be removed. 
        A queue is a linear data structure that follows the First In First Out (FIFO) order. 
        The element that is inserted first is the first element to be removed.


4. Applications of Stack?

Ans: The applications of stack are :

    1. Infix, postfix and prefix expressions.
    2. Function calls and expression evaluation.
    3. Backtracking.
    4. Undo operations in editors.
    5. Forward and backward feature in web browsers.
    6. Tree traversals.
    7. Parenthesis matching.



Tag += Queue

1. What is a queue? What are the different types of queues?

Ans: A queue is a linear data structure that follows the First In First Out (FIFO) order. 
        The element that is inserted first is the first element to be removed. 
        The insertion and deletion operations are performed at two different ends of the queue called the front and rear. 
        The queue is a simple data structure that can be implemented using arrays or linked lists.

        Types of queues:
        1. Array implementation of queue
        2. Linked list implementation of queue



2. What is circular queue?

Ans: A circular queue is a linear data structure in which the operations are performed based on the FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. 
        It is also called ‘Ring Buffer’.



3. What is the difference between a circular queue and a linear queue?

Ans: A circular queue is a queue in which the last position is connected back to the first position to make a circle. 
        A linear queue is a queue in which the last position is not connected back to the first position.



4. Applications of Queue?

Ans: The applications of queue are :

    1. CPU scheduling, Disk Scheduling.
    2. Handling of interrupts in real-time systems.
    3. Call Center phone systems use Queues to hold people calling them in an order, until a service representative is free.
    4. Handling of data in Bounded Buffer problems.
    5. In real life scenario, Call Center phone systems uses Queues to hold people calling them in an order, until a service representative is free.
    6. Traffic signals for a road.



Tag += Tree

1. What is a tree? What are the different types of trees?

Ans: A tree is a hierarchical data structure that represents the nodes connected by edges. 
        A tree data structure can be defined recursively as a collection of nodes (starting at a root node), 
        where each node is a data structure consisting of a value, together with a list of references to nodes (the “children”), 
        with the constraints that no reference is duplicated, and none points to the root.

        Types of trees:
        1. Binary tree
        2. Binary search tree
        3. AVL tree
        4. Red-black tree
        5. B-tree
        6. B+ tree
        7. B* tree
        8. Splay tree
        9. Ternary search tree
        10. K-d tree
        11. Segment tree
        12. Fenwick tree
        13. Suffix tree
        14. Suffix array
        15. Trie
        16. N-ary tree



2. Categories:

        a. Complete Tree: A complete binary tree is a binary tree in which every level, 
                except possibly the last, is completely filled, and all nodes are as far left as possible.


        b. Full Tree: A full binary tree is a special type of binary tree in which every parent node/internal 
                node has two children and all leaf nodes are at the same level.

    
        c. Perfect Tree: A perfect binary tree is a special type of full binary tree in which all internal 
                nodes have two children and all leaves are at the same level.


        d. Balanced Tree: A balanced binary tree is a special type of binary tree in which the difference
                between the height of the left and right subtrees of any node is not more than one.

        e. Degenerate/Pathological Tree: A degenerate (or Pathological) tree is a tree in which every internal
                node has one child. Such trees are performance-wise same as linked list.

        f. Skewed Tree: A skewed tree is a tree where all internal nodes have one child. Such trees are performance-wise
                same as linked list.

        


3. What is B Tree and B+ Tree.

Ans:    B tree is a self-balancing tree data structure that maintains sorted data and allows searches, sequential access, 
                insertions, and deletions in logarithmic time.

        B+ Tree is a special type of B tree in which all interior nodes act as index with only key and child pointer,
                and all the leaves contain the actual records sorted in key order.

        


4. What is AVL tree?

Ans:    An AVL tree is a self-balancing Binary Search Tree (BST) where the difference between heights 
                of left and right subtrees cannot be more than one for all nodes.




5. Types of Nodes:

        a. External node : A node which contains no children is called an external node, 
                it is also called as a Leaf Node.


        b. Internal node/Non leaf node/Branch node: A node which contains children is called an internal
                node, it is also called as a Branch node or Non leaf Node.

        
        c. Root node/Root data: Root node is the first node inserted in the tree or it is the
                top most data in the tree.

        
        d. Children: Children of a node are the nodes directly associated with that node.


        e. Parent node/Edge/Link: A node from which an edge comes is called as Parent node or edge or link.


        f. Siblings/Adjacent nodes: The nodes which share a common parent node are referred to as
                siblings or adjacent nodes.


        

6. What is Binary Search Tree?

Ans:    A binary search tree (BST) is a root node, which has pointers or reference to two child nodes: 
                (1) the left child and the (2) right child. The left child node has a value smaller than its parent node, 
                or it is the smallest value in its right sub-tree, and (b) the right child node has a value 
                greater than its parent node, or it is the largest value in its right sub-tree.



7. Applications of Tree:

Ans:    The applications of tree are :

        1. Implementation of Priority Queues.
        2. Manipulate hierarchical data.
        3. Make information easy to search (see tree traversal).
        4. Manipulate sorted lists of data.
        5. Router algorithms
        6. Form of a multi-stage decision-making (see business chess).
        7. Trie data structure.
        8. Red-black tree, splay trees and AVL trees provide implementations of those and related data structures
                that allow for efficient lookup, addition, and removal of records.




        



Tag += Graphs


1. What is Graph ?

Ans: The Graph is a non-linear data structure comprising of vertices and edges. 

        The elements of a graph which can have relationships among them are
        referred to as vertices, and the relationships among the vertices are 
        referred to as edges.


2. What is the use of graph data structure ?

Ans: The Graph data structure is widely used to represent many real-world problems. 

        Graphs are basically used to solve many complex problems easily. 

        Some of the Important Applications of Graphs are:

    – Social Networking.
    – GPS (Maps/satellite communication).
    – Peer-to-peer network
    – Games.
    – Recommendation systems



3. Types of Graph

        a. Undirected graph
                        
           - Two vertices are connected by an undirected edge.
        
        b. Directed graph and
                        
           - Vertices are associated with pairs of vertices, 
                 called the start and end vertices of the edge.
        
        c. Graph can also have more properties like 
                        
           - Multigraph- edges can appear more than once.
           - Weighted Graph- edge are associated with nonnegative numbers called weights or costs.



4. Connected graph

                A graph is called a connected graph if there is a path between 
                any two vertices. If we can connect any two vertices in a graph by 
                turning on any number of edges, then the graph is said to be a 
                strongly connected graph.



5. Types of Graph Traversals:

        a. Depth First Traversal or DFS for a Graph:

                DFS traversal goes beyond one possible outward path before resuming 
                the outer level of search. If every possible outward edge of a vertex 
                at a certain level of traversal is traversed before returning to the 
                sooner levels of search, we say that DFS is being applied.

                Data Structures Used: A Stack is used in DFS Traversal.

        
        b. Breadth First Traversal or BFS for a Graph:

                BFS traversal goes across to all of the outward edges of a vertex before 
                advancing to any of the next vertices at the same level of search. If every 
                traversed edge’s two end points are visited in order from left to right, 
                then BFS is being applied. The level of a vertex is calculated as the number 
                of transformations on the data set in order to obtain the data set being traversed. 
                The breadth of a data structure is found by locating in each data set that exists 
                beyond the data set being searched the lowest level that exists in the data set.

                Data Structures Used: We can use a Queue to implement BFS traversal.



6. Applications of Graph .

Ans: The applications of Graph trees are :

        1. Google map is based on graphs.
        2. Website validators check for cycles in webpages.
        3.Algorithms like Kruskal’ s minimum spanning tree and Dijikstra’s shortest path
            can be applied on Graph or trees.
        4. Binary Search, DFS are applied on this.
        5. Tree and graphs are the same
        6. Maze game are implemented


